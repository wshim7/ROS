#include "RS232.h"

RS232::RS232(void)
{
	nPorts 				= 0;
}

RS232::~RS232(void)
{
	close();
	nPorts 				= 0;
	bInited = false;

}


void RS232::close()
{
	if (bInited){
		SetCommTimeouts(hComm,&oldTimeout);
		CloseHandle(hComm);
		hComm 		= INVALID_HANDLE_VALUE;
		bInited 	= false;
	}

}

bool RS232::setup()
{
	return setup(0,9600);		// the first one, at 9600 is a good choice...
}

bool RS232::setup( string portName, int baudrate )
{
	m_portname = portName;
	m_baudrate = baudrate;

	bInited = false;

	hComm=CreateFileA(portName.c_str(),GENERIC_READ|GENERIC_WRITE,0,0,
		OPEN_EXISTING,0,0);

	if(hComm==INVALID_HANDLE_VALUE){
		printf("ofSerial: unable to open port\n");
		return false;
	}
	// now try the settings:
	COMMCONFIG cfg;
	DWORD cfgSize;
	char  buf[80];

	cfgSize=sizeof(cfg);
	GetCommConfig(hComm,&cfg,&cfgSize);
	int bps = baudrate;
	sprintf_s(buf,"baud=%d parity=N data=8 stop=1",bps);

	// msvc doesn't like BuildCommDCB,
	//so we need to use this version: BuildCommDCBA
	if(!BuildCommDCBA(buf,&cfg.dcb)){
		printf("Serial: unable to build comm dcb; (%s)\n",buf);
	}

	// Set baudrate and bits etc.
	// Note that BuildCommDCB() clears XON/XOFF and hardware control by default

	if(!SetCommState(hComm,&cfg.dcb)){
		printf("Serial: Can't set comm state\n");
	}

	// Set communication timeouts (NT)
	COMMTIMEOUTS tOut;
	GetCommTimeouts(hComm,&oldTimeout);
	tOut = oldTimeout;
	// Make timeout so that:
	// - return immediately with buffered characters
	tOut.ReadIntervalTimeout=MAXDWORD;
	tOut.ReadTotalTimeoutMultiplier=200;
	tOut.ReadTotalTimeoutConstant=0;
	SetCommTimeouts(hComm,&tOut);

	bInited = true;
	return true;

}

int RS232::writeBytes( unsigned char * buffer, int length )
{

	if (!bInited){
		printf("Serial: serial not inited in writeBytes\n");
		return SERIAL_ERROR;
	}

	DWORD written;
	if(!WriteFile(hComm, buffer, length, &written,0)){
		this->close();
		Sleep(5);
		this->setup(m_portname, m_baudrate);
		Sleep(5);
		return SERIAL_ERROR;
	}
	return (int)written;

}

int RS232::readBytes( unsigned char * buffer, int length )
{
	if (!bInited){
		printf("Serial: serial not inited in readBytes");
		return SERIAL_ERROR;
	}

	DWORD nRead = 0;
	if (!ReadFile(hComm,buffer,length,&nRead,0)){
		printf("Serial: trouble reading from port in readBytes");
		return SERIAL_ERROR;
	}
	return (int)nRead;
}

void RS232::flush( bool flushIn /*= true*/, bool flushOut /*= true*/ )
{
	if (!bInited){
		printf("Serial: serial not inited in flush");
		return;
	}

	int flushType = 0;

	if( flushIn && flushOut) flushType = PURGE_TXCLEAR | PURGE_RXCLEAR;
	else if(flushIn) flushType = PURGE_RXCLEAR;
	else if(flushOut) flushType = PURGE_TXCLEAR;
	else return;

	PurgeComm(hComm, flushType);
}
